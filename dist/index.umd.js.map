{"version":3,"file":"index.umd.js","sources":["../src/converts.ts","../src/utils.ts","../src/color.ts","../src/constants.ts","../src/decomposes.ts","../src/index.ts"],"sourcesContent":["import { DEF_BG } from './constants'\nimport { fmtInt, fmtVal, getColorMap } from './utils'\nimport { IHsv, IHsl, IColor, ICmy } from './interface'\n\n// hsl值转化为hsv值\nexport const hsl2hsv = (hue: number, sat: number, light: number): IHsv => {\n  sat = sat / 100\n  light = light / 100\n  const lightMin = Math.max(light, 0.01)\n  let satMin = sat\n  light *= 2\n  sat *= light <= 1 ? light : 2 - light\n  satMin *= lightMin <= 1 ? lightMin : 2 - lightMin\n  const value = (light + sat) / 2\n  const vSat = light === 0 ? (2 * satMin) / (lightMin + satMin) : (2 * sat) / (light + sat)\n\n  return {\n    h: hue,\n    s: vSat * 100,\n    v: value * 100\n  }\n}\n\n// hsv值转化为hsl值\nexport const hsv2hsl = (hue: number, sat: number, value: number): IHsl => {\n  sat = sat / 100\n  value = value / 100\n  const dif = (2 - sat) * value\n  const sv = sat * value\n  if (dif === 0 || sv === 0) {\n    sat = 0\n  } else {\n    sat = sv / (dif <= 1 ? dif : 2 - dif)\n  }\n  return {\n    h: fmtInt(hue, 360),\n    s: fmtInt(100 * sat, 100),\n    l: fmtInt((dif / 2) * 100, 100)\n  }\n}\n\n// rgb值转化为hsv值\nexport const rgb2hsv = (red: number, green: number, blue: number): IHsv => {\n  const min = Math.min(red, green, blue)\n  const max = Math.max(red, green, blue)\n  const dif = max - min\n  const sat = max === 0 ? 0 : (dif / max) * 100\n  let hue\n  if (max === min) {\n    hue = 0\n  } else if (red === max) {\n    hue = (green - blue) / dif\n  } else if (green === max) {\n    hue = 2 + (blue - red) / dif\n  } else {\n    hue = 4 + (red - green) / dif\n  }\n  hue = Math.min(60 * hue, 360)\n  if (hue < 0) {\n    hue += 360\n  }\n  return { h: fmtInt(hue, 360), s: fmtInt(sat, 100), v: fmtInt(((max / 255) * 1e3) / 10, 100) }\n}\n\n// hsv值转化为rgb值\nexport const hsv2rgb = (hue: number, sat: number, value: number): IColor => {\n  hue = hue / 60\n  sat = sat / 100\n  value = value / 100\n  const mod = Math.floor(hue) % 6\n  const decimal = hue - Math.floor(hue)\n  hue = 255 * value * (1 - sat)\n  const vsd = (1 - sat * decimal) * value * 255\n  sat = 255 * value * (1 - sat * (1 - decimal))\n  value *= 255\n  switch (mod) {\n    case 0:\n      return { r: fmtInt(value), g: fmtInt(sat), b: fmtInt(hue) }\n    case 1:\n      return { r: fmtInt(vsd), g: fmtInt(value), b: fmtInt(hue) }\n    case 2:\n      return { r: fmtInt(hue), g: fmtInt(value), b: fmtInt(sat) }\n    case 3:\n      return { r: fmtInt(hue), g: fmtInt(vsd), b: fmtInt(value) }\n    case 4:\n      return { r: fmtInt(sat), g: fmtInt(hue), b: fmtInt(value) }\n    case 5:\n    default:\n      return { r: fmtInt(value), g: fmtInt(hue), b: fmtInt(vsd) }\n  }\n}\n\n// hsl值转化为rgb值\nexport const hsl2rgb = (hue: number, saturation: number, lightness: number): IColor => {\n  const hue01 = fmtVal(hue, 360) / 360\n  let sat01 = fmtVal(saturation, 100) / 100\n  let light01 = fmtVal(lightness, 100) / 100\n  if (sat01 === 0) {\n    return { r: 255 * light01, g: 255 * light01, b: 255 * light01 }\n  }\n  sat01 = light01 < 0.5 ? light01 * (1 + sat01) : light01 + sat01 - light01 * sat01\n  light01 = 2 * light01 - sat01\n  const hsl = [0, 0, 0]\n  for (let i = 0; i < hsl.length; i++) {\n    let cv = hue01 + (1 / 3) * -(i - 1)\n    cv = cv < 0 ? cv + 1 : cv > 1 ? cv - 1 : cv\n    if (cv * 6 < 1) {\n      cv = light01 + 6 * (sat01 - light01) * cv\n    } else if (cv * 2 < 1) {\n      cv = sat01\n    } else if (cv * 3 < 2) {\n      cv = light01 + (sat01 - light01) * (2 / 3 - cv) * 6\n    } else {\n      cv = light01\n    }\n    hsl[i] = fmtInt(cv * 255)\n  }\n  return { r: hsl[0], g: hsl[1], b: hsl[2] }\n}\n\n// rgb值转化为hsl值\nexport const rgb2hsl = (red: number, green: number, blue: number): IHsl => {\n  let red01 = fmtVal(red) / 255\n  const green01 = fmtVal(green) / 255\n  const blue01 = fmtVal(blue) / 255\n  const min = Math.min(red01, green01, blue01)\n  const max = Math.max(red01, green01, blue01)\n  const dif = max - min\n  let hue\n  if (max === min) {\n    hue = 0\n  } else if (red01 === max) {\n    hue = (green01 - blue01) / dif\n  } else if (green01 === max) {\n    hue = 2 + (blue01 - red01) / dif\n  } else {\n    hue = 4 + (red01 - green01) / dif\n  }\n  hue = Math.min(60 * hue, 360)\n  if (hue < 0) {\n    hue += 360\n  }\n  red01 = (min + max) / 2\n  const sat = (max === min ? 0 : red01 <= 0.5 ? dif / (max + min) : dif / (2 - max - min)) * 100\n  return { h: fmtInt(hue, 360), s: fmtInt(sat, 100), l: fmtInt(100 * red01, 100) }\n}\n\n// cmy值转化为rgb值\nexport const cmy2rgb = (cyan: number, magenta: number, yellow: number): ICmy => {\n  return {\n    c: Math.round(255 * (1 - fmtVal(cyan / 100, 1))),\n    m: Math.round(255 * (1 - fmtVal(magenta / 100, 1))),\n    y: Math.round(255 * (1 - fmtVal(yellow / 100, 1)))\n  }\n}\n\n// rgb值转化为cmy值\nexport const rgb2cmy = (r: number, g: number, b: number): IColor => {\n  return {\n    r: Math.round(100 * fmtVal(1 - r / 255, 1)) || 0,\n    g: Math.round(100 * fmtVal(1 - g / 255, 1)) || 0,\n    b: Math.round(100 * fmtVal(1 - b / 255, 1)) || 0\n  }\n}\n\n// 把rgba的颜色值，转化为rgb颜色值\nexport const rgba2rgb = (color: string, bgColor: string = DEF_BG): IColor => {\n  const rgba = getColorMap(color)\n  const alpha = rgba.a ?? 1\n  const bgMap = getColorMap(bgColor)\n  const r = Math.round(rgba.r * alpha + bgMap.r * (1 - alpha))\n  const g = Math.round(rgba.g * alpha + bgMap.g * (1 - alpha))\n  const b = Math.round(rgba.b * alpha + bgMap.b * (1 - alpha))\n  return { r, g, b, a: 1 }\n}\n\n// 把有透明度的颜色值转为rgb颜色\nexport const alpha2rgb = (color: string): IColor => {\n  const { r, g, b, a } = getColorMap(color)\n  return rgba2rgb(`rgba(${r}, ${g}, ${b}, ${a ?? 1})`, DEF_BG)\n}\n","import { IColor } from './interface'\nimport { CM, REG_EXP_MAP } from './constants'\nimport { decomposeHexa, decomposeHsla, decomposeHsva, decomposeRgba } from './decomposes'\n\nexport const regTest = (value: string, key: string = ''): boolean => {\n  const regExp = REG_EXP_MAP[key]\n  if (regExp) {\n    regExp.lastIndex = 0\n    return regExp.test(value)\n  }\n  return false\n}\n\n// 获取默认值，高版es版本，可以用??代替\nexport const def = (value: any, def: any): any => {\n  return value == null ? def : value\n}\n\n// 格式化值，保证值在0与max之间\nexport const fmtVal = (value: number = 0, max: number = 255): number => {\n  return Math.max(0, Math.min(value, max))\n}\n\n// 格式化值，保证值在0与max之间的整数\nexport const fmtInt = (value: number, max: number = 255): number => {\n  return Math.round(fmtVal(value, max))\n}\n\n// 十六进制转数字\nexport const hex2num = (hex: string | number | undefined | null): number => {\n  return hex == null ? 0 : parseInt(`0x${hex}`)\n}\n\n// 数字转为十六进制\nexport const num2hex = (num: number): string => {\n  const val = Number(Math.min(num, 255)).toString(16)\n  return val.length === 1 ? `0${val}` : val\n}\n\n// 十六进制值转为百分比\nexport const hexPct = (hex: string | undefined | null): number => {\n  return hex == null ? 1 : fmtInt((hex2num(hex) * 100) / 255) / 100\n}\n\n// 百分比转化为两位十六进制\nexport const pctHex = (pct: number): string => {\n  return num2hex(fmtInt(pct * 255))\n}\n\n// 转化为小写\nexport const toLow = (color: string = ''): string => {\n  return color.toLowerCase()\n}\n\n// 删除空格，并转化为小写同意处理\nexport const deleteSpace = (color: string = ''): string => {\n  return toLow(color).replace(/\\s+/g, '')\n}\n\n// 格式化空格\nexport const fmtSpace = (color: string = ''): string => {\n  return deleteSpace(color).replace(/,/g, ', ').replace(', .', ', 0.')\n}\n\n// 获取颜色值的类型\nexport const colorType = (color: string): string => {\n  if (color.length < 4) return ''\n  const lower = toLow(color)\n  if (regTest(lower, CM.rgb_a)) {\n    return lower.startsWith(CM.rgba) ? CM.rgba : CM.rgb\n  } else if (regTest(color, CM.hex_a)) {\n    return color.length === 4 || color.length === 7 ? CM.hex : CM.hexa\n  } else if (regTest(lower, CM.hsv_a)) {\n    return lower.startsWith(CM.hsva) ? CM.hsva : CM.hsv\n  } else if (regTest(lower, CM.hsl_a)) {\n    return lower.startsWith(CM.hsla) ? CM.hsla : CM.hsl\n  } else {\n    return ''\n  }\n}\n\n// 判断颜色值是否含有透明度\nexport const hasAlpha = (color: string): boolean => {\n  return /a$/.test(colorType(color))\n}\n\n// 重复一次十六进制字符\nexport const doubleHex = (hex: string): string => {\n  return hex.replace(/[0-9a-fA-F]/g, m => m + m)\n}\n\n// 格式化十六进制颜色值，让其包含rgba\nexport const formatHex = (color: string): string | undefined => {\n  if (!color.startsWith('#') || color.length < 4) {\n    console.error(`${color} 不是正确的十六进制颜色值！`)\n    return undefined\n  }\n  switch (color.length) {\n    case 4:\n      return `${doubleHex(color)}ff`\n    case 5:\n      return `${doubleHex(color)}`\n    case 6:\n      return `#${doubleHex(color.slice(1, 4))}${color.slice(4)}`\n    case 7:\n      return `${color}ff`\n    case 8:\n      return `${color.slice(0, 7)}${doubleHex(color.slice(7))}`\n    case 9:\n      return color\n    default:\n      return color.slice(0, 9)\n  }\n}\n\n// 获取颜色值rgba对象\nexport const getColorMap = (color: string): IColor => {\n  switch (colorType(color)) {\n    case CM.rgb:\n    case CM.rgba:\n      return decomposeRgba(color)\n    case CM.hex:\n    case CM.hexa:\n      return decomposeHexa(color)\n    case CM.hsl:\n    case CM.hsla:\n      return decomposeHsla(color)\n    case CM.hsv:\n    case CM.hsva:\n      return decomposeHsva(color)\n    default: // 默认rgb\n      return decomposeRgba(color)\n  }\n}\n\nexport const isRgb = (color: string): boolean => regTest(toLow(color), CM.rgb)\nexport const isHex = (color: string): boolean => regTest(toLow(color), CM.hex)\nexport const isHsv = (color: string): boolean => regTest(toLow(color), CM.hsv)\nexport const isHsl = (color: string): boolean => regTest(toLow(color), CM.hsl)\nexport const isRgba = (color: string): boolean => regTest(toLow(color), CM.rgba)\nexport const isHexa = (color: string): boolean => regTest(toLow(color), CM.hexa)\nexport const isHsva = (color: string): boolean => regTest(toLow(color), CM.hsva)\nexport const isHsla = (color: string): boolean => regTest(toLow(color), CM.hsla)\n","import * as utils from './utils'\nimport { DEF_BG, CM } from './constants'\nimport { rgba2rgb, alpha2rgb, rgb2hsv, rgb2hsl } from './converts'\n\n/**\n * 判断是否为颜色值\n * RGBA color to RGB\n * @param color RGBA颜色值\n * @param type 目标类型\n */\nexport const isColor = (color: string, type?: string): boolean => {\n  const colorType = utils.colorType(color)\n  return !type ? !!colorType : colorType === type\n}\n\n/**\n * RGBA转为RGB\n * RGBA color to RGB\n * @param color RGBA颜色值\n * @param bgColor 背景颜色值，默认白色\n */\nexport const rgbaToRgb = (color: string, bgColor: string = DEF_BG): string => {\n  if (!isColor(color, CM.rgba)) return color\n  color = utils.toLow(color)\n  // 如果 背景颜色有透明度，先先将有透明度的值转为没有透明度的值\n  const { r, g, b } = rgba2rgb(color, utils.hasAlpha(bgColor) ? rgbaToRgb(bgColor) : bgColor)\n  return `rgb(${r}, ${g}, ${b})`\n}\n\n/**\n * 把颜色值转为RGB\n * The color to RGB\n * @param color 颜色值\n */\nexport const toRgb = (color: string): string => {\n  if (utils.isRgb(color) || !isColor(color)) return utils.fmtSpace(color)\n  color = utils.toLow(color)\n  const { r, g, b } = utils.hasAlpha(color) ? alpha2rgb(color) : utils.getColorMap(color)\n  return `rgb(${r}, ${g}, ${b})`\n}\n\n/**\n * 把颜色值转为RGBA\n * The color to RGBA\n * @param color 颜色值\n * @param alpha 透明度\n */\nexport const toRgba = (color: string, alpha?: number): string => {\n  if ((utils.isRgba(color) && alpha == null) || !isColor(color)) return utils.fmtSpace(color)\n  color = utils.toLow(color)\n  const { r, g, b, a } = utils.getColorMap(alpha == null ? color : toRgb(color))\n  return `rgba(${r}, ${g}, ${b}, ${alpha ?? a ?? 1})`\n}\n\n/**\n * 把颜色值转为HEX\n * The color to HEX\n * @param color 颜色值\n */\nexport const toHex = (color: string): string => {\n  if (utils.isHex(color) || !isColor(color)) return utils.fmtSpace(color)\n  color = utils.toLow(color)\n  const { r, g, b } = utils.getColorMap(toRgb(color))\n  return `#${utils.num2hex(r)}${utils.num2hex(g)}${utils.num2hex(b)}`\n}\n\n/**\n * 把颜色值转为HEXA\n * The color to HEXA\n * @param color 颜色值\n * @param alpha 透明度\n */\nexport const toHexa = (color: string, alpha?: number): string => {\n  if ((utils.isHexa(color) && alpha == null) || !isColor(color)) return utils.fmtSpace(color)\n  color = utils.toLow(color)\n  const { r, g, b, a } = utils.getColorMap(alpha == null ? color : toRgb(color))\n  return `#${utils.num2hex(r)}${utils.num2hex(g)}${utils.num2hex(b)}${utils.pctHex(alpha ?? a ?? 1)}`\n}\n\n/**\n * 把颜色值转为HSV\n * The color to HSV\n * @param color 颜色值\n */\nexport const toHsv = (color: string): string => {\n  if (utils.isHsv(color) || !isColor(color)) return utils.fmtSpace(color)\n  color = utils.toLow(color)\n  const { r, g, b } = utils.getColorMap(toRgb(color))\n  const { h, s, v } = rgb2hsv(r, g, b)\n  return `hsv(${h}, ${Math.round(s)}%, ${Math.round(v)}%)`\n}\n\n/**\n * 把颜色值转为HSVA\n * The color to HSVA\n * @param color 颜色值\n * @param alpha 透明度\n */\nexport const toHsva = (color: string, alpha?: number): string => {\n  if ((utils.isHsva(color) && alpha == null) || !isColor(color)) return utils.fmtSpace(color)\n  color = utils.toLow(color)\n  const { r, g, b, a } = utils.getColorMap(alpha == null ? color : toRgb(color))\n  const { h, s, v } = rgb2hsv(r, g, b)\n  return `hsva(${h}, ${Math.round(s)}%, ${Math.round(v)}%, ${alpha ?? a ?? 1})`\n}\n\n/**\n * 把颜色值转为HSL\n * The color to HSL\n * @param color 颜色值\n */\nexport const toHsl = (color: string): string => {\n  if (utils.isHsl(color) || !isColor(color)) return utils.fmtSpace(color)\n  color = utils.toLow(color)\n  const { r, g, b } = utils.getColorMap(toRgb(color))\n  const { h, s, l } = rgb2hsl(r, g, b)\n  return `hsl(${h}, ${s}%, ${l}%)`\n}\n\n/**\n * 把颜色值转为HSLA\n * The color to HSLA\n * @param color 颜色值\n * @param alpha 透明度\n */\nexport const toHsla = (color: string, alpha?: number): string => {\n  if ((utils.isHsla(color) && alpha == null) || !isColor(color)) return utils.fmtSpace(color)\n  color = utils.toLow(color)\n  const { r, g, b, a } = utils.getColorMap(alpha == null ? color : toRgb(color))\n  const { h, s, l } = rgb2hsl(r, g, b)\n  return `hsla(${h}, ${s}%, ${l}%, ${alpha ?? a ?? 1})`\n}\n\n/**\n * 获取颜色深度值，值越低深度越高\n * Get color depth value，The lower the value, the higher the depth\n * @param color 颜色值\n */\nexport const getColorDepth = (color: string): number | undefined => {\n  if (!isColor(color)) return undefined\n  color = utils.toLow(color)\n  const { r, g, b } = utils.getColorMap(toRgb(color))\n  return utils.fmtInt(r * 0.299 + g * 0.587 + b * 0.114)\n}\n\n/**\n * 判断颜色是否是深色\n * Judge whether the color is dark or not\n * @param color 颜色值\n * @param criticalValue 临界值 默认127.5\n */\nexport const darkColor = (color: string, criticalValue: number = 127.5): boolean | undefined => {\n  const depth = getColorDepth(color)\n  if (depth == null) return undefined\n  return depth < criticalValue\n}\n\n/**\n * 判断颜色是否是浅色\n * Judge whether the color is light or not\n * @param color 颜色值\n * @param criticalValue 临界值 默认127.5\n */\nexport const lightColor = (color: string, criticalValue: number): boolean | undefined => {\n  if (!utils.colorType(color)) return undefined\n  return !darkColor(color, criticalValue)\n}\n","export const DEF_BG = '#ffffffff'\n\n// color map\nexport const CM = {\n  rgb: 'rgb',\n  hex: 'hex',\n  hsv: 'hsv',\n  hsl: 'hsl',\n  rgba: 'rgba',\n  hexa: 'hexa',\n  hsva: 'hsva',\n  hsla: 'hsla',\n  rgb_a: 'rgb_a',\n  hex_a: 'hex_a',\n  hsv_a: 'hsv_a',\n  hsl_a: 'hsl_a'\n}\n\nexport const REG_EXP_MAP = {\n  [CM.rgb_a]: /^rgba?\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}\\s*,\\s*\\d{1,3}\\s*(,\\s*(0?\\.\\d+|1)\\s*)?\\)$/gi,\n  [CM.hex_a]: /^#[0-9a-fA-F]{3,8}$/g,\n  [CM.hsv_a]: /^hsva?\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%\\s*,\\s*\\d{1,3}%\\s*(,\\s*(0?\\.\\d+|1)\\s*)?\\)$/gi,\n  [CM.hsl_a]: /^hsla?\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%\\s*,\\s*\\d{1,3}%\\s*(,\\s*(0?\\.\\d+|1)\\s*)?\\)$/gi,\n  [CM.rgba]: /^rgba\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}\\s*,\\s*\\d{1,3}\\s*,\\s*(0?\\.\\d+|1)\\s*\\)$/gi,\n  [CM.hexa]: /^#[0-9a-fA-F]{8}$/g,\n  [CM.hsva]: /^hsva\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%\\s*,\\s*\\d{1,3}%\\s*,\\s*(0?\\.\\d+|1)\\s*\\)$/gi,\n  [CM.hsla]: /^hsla\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%\\s*,\\s*\\d{1,3}%\\s*,\\s*(0?\\.\\d+|1)\\s*\\)$/gi,\n  [CM.rgb]: /^rgb\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}\\s*,\\s*\\d{1,3}\\s*\\)$/gi,\n  [CM.hex]: /^#[0-9a-fA-F]{6}$/g,\n  [CM.hsv]: /^hsv\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%\\s*,\\s*\\d{1,3}%\\s*\\)$/gi,\n  [CM.hsl]: /^hsl\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%\\s*,\\s*\\d{1,3}%\\s*\\)$/gi\n}\n","import { IColor } from './interface'\nimport { hsl2rgb, hsv2rgb } from './converts'\nimport { deleteSpace, fmtVal, formatHex, hasAlpha, hex2num, hexPct } from './utils'\n\n// 分解rgba颜色值\nexport const decomposeRgba = (color: string): IColor => {\n  const c = deleteSpace(color)\n    .replace(/^rgba?/gi, '')\n    .replace(/[()]/g, '')\n    .split(',')\n    .map(val => Number(val))\n  return {\n    r: fmtVal(c[0]),\n    g: fmtVal(c[1]),\n    b: fmtVal(c[2]),\n    a: hasAlpha(color) ? fmtVal(c[3] ?? 1, 1) : 1\n  }\n}\n\n// 分解十六进制颜色值\nexport const decomposeHexa = (color: string): IColor => {\n  const c = formatHex(deleteSpace(color)) ?? ''\n  return {\n    r: hex2num(c.slice(1, 3)),\n    g: hex2num(c.slice(3, 5)),\n    b: hex2num(c.slice(5, 7)),\n    a: hexPct(c.slice(7, 9))\n  }\n}\n\n// 分解hsl颜色值\nexport const decomposeHsla = (color: string): IColor => {\n  const c = deleteSpace(color)\n    .replace(/(^hsla?)|[()%]/gi, '')\n    .split(',')\n    .map(val => Number(val))\n  const a = hasAlpha(color) ? fmtVal(c[3] ?? 1, 1) : 1\n  const rgb = hsl2rgb(fmtVal(c[0], 360), fmtVal(c[1], 100), fmtVal(c[2], 100))\n  return { ...rgb, a }\n}\n\n// 分解hsv颜色值\nexport const decomposeHsva = (color: string): IColor => {\n  const c = deleteSpace(color)\n    .replace(/(^hsva?)|[()%]/gi, '')\n    .split(',')\n    .map(val => Number(val))\n  const a = hasAlpha(color) ? fmtVal(c[3] ?? 1, 1) : 1\n  const rgb = hsv2rgb(fmtVal(c[0], 360), fmtVal(c[1], 100), fmtVal(c[2], 100))\n  return { ...rgb, a }\n}\n","import * as tools from './color'\n\nexport default {\n  version: '1.0.10',\n  ...tools,\n  convert(color: string, target: string): any {\n    if (tools.isColor(color)) {\n      const key = `to${target[0].toUpperCase()}${target.slice(1).toLowerCase()}`\n      // @ts-expect-error\n      const fn = tools[key]\n      if (typeof fn === 'function') {\n        return fn(color)\n      }\n      return color\n    }\n    return color\n  }\n}\n"],"names":["rgb2hsv","red","green","blue","min","Math","max","dif","sat","hue","h","fmtInt","s","v","rgb2hsl","red01","fmtVal","green01","blue01","l","hexPct","hex","hex2num","fmtSpace","deleteSpace","replace","hasAlpha","color","test","colorType","formatHex","startsWith","length","console","error","concat","doubleHex","slice","isColor","type","utils","toRgb","r","g","b","regTest","toLow","CM","rgb","_ref","getColorMap","a","rgba2rgb","DEF_BG","getColorDepth","darkColor","criticalValue","depth","hsv","hsl","rgba","hexa","hsva","hsla","rgb_a","hex_a","hsv_a","hsl_a","REG_EXP_MAP","_defineProperty","_REG_EXP_MAP","bgColor","alpha","bgMap","round","decomposeRgba","c","split","map","val","Number","_c$","decomposeHexa","_formatHex","decomposeHsla","_c$2","_objectSpread","saturation","lightness","hue01","sat01","light01","i","cv","decomposeHsva","_c$3","value","mod","floor","decimal","vsd","regExp","lastIndex","parseInt","num2hex","num","toString","toLowerCase","lower","m","rgbaToRgb","_rgba2rgb","_utils$getColorMap","_utils$getColorMap3","pct","_ref3","_rgb2hsv","_utils$getColorMap5","_rgb2hsv2","_ref4","_rgb2hsl","_utils$getColorMap7","_rgb2hsl2","version","tools","convert","target","key","toUpperCase","fn"],"mappings":"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"}